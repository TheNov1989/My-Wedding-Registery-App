{"ast":null,"code":"const express = require(\"express\"); // Express web server framework\n\n\nconst request = require(\"request\"); // \"Request\" library\n\n\nconst cors = require(\"cors\");\n\nconst querystring = require(\"querystring\");\n\nconst cookieParser = require(\"cookie-parser\");\n\nconst client_id = \"d7e3503eaeb6461c95c9cc1132d23534\"; // Your client id\n\nconst client_secret = \"60f9e47ffb65480eb0a51c1fa4a5ff2c\"; // Your secret\n\nconst redirect_uri = \"http://localhost:3000/\"; // Your redirect uri\n\n/**\r\n * Generates a random string containing numbers and letters\r\n * @param  {number} length The length of the string\r\n * @return {string} The generated string\r\n */\n\nconst generateRandomString = function (length) {\n  const text = \"\";\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n};\n\nconst stateKey = \"spotify_auth_state\";\nconst oSpotifyAuth = express();\noSpotifyAuth.use(express.static(__dirname + \"/public\")).use(cors()).use(cookieParser());\noSpotifyAuth.get(\"/login\", function (req, res) {\n  const state = generateRandomString(16);\n  res.cookie(stateKey, state); // your application requests authorization\n\n  const scope = \"user-read-private user-read-email\";\n  res.redirect(\"https://accounts.spotify.com/authorize?\" + querystring.stringify({\n    response_type: \"code\",\n    client_id: client_id,\n    scope: scope,\n    redirect_uri: redirect_uri,\n    state: state\n  }));\n});\noSpotifyAuth.get(\"/callback\", function (req, res) {\n  // your application requests refresh and access tokens\n  // after checking the state parameter\n  const code = req.query.code || null;\n  const state = req.query.state || null;\n  const storedState = req.cookies ? req.cookies[stateKey] : null;\n\n  if (state === null || state !== storedState) {\n    res.redirect(\"/#\" + querystring.stringify({\n      error: \"state_mismatch\"\n    }));\n  } else {\n    res.clearCookie(stateKey);\n    const authOptions = {\n      url: \"https://accounts.spotify.com/api/token\",\n      form: {\n        code: code,\n        redirect_uri: redirect_uri,\n        grant_type: \"authorization_code\"\n      },\n      headers: {\n        Authorization: \"Basic \" + new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\n      },\n      json: true\n    };\n    request.post(authOptions, function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        const access_token = body.access_token,\n              refresh_token = body.refresh_token;\n        const options = {\n          url: \"https://api.spotify.com/v1/me\",\n          headers: {\n            Authorization: \"Bearer \" + access_token\n          },\n          json: true\n        }; // use the access token to access the Spotify Web API\n\n        request.get(options, function (error, response, body) {\n          console.log(body);\n        }); // we can also pass the token to the browser to make requests from there\n\n        res.redirect(\"/#\" + querystring.stringify({\n          access_token: access_token,\n          refresh_token: refresh_token\n        }));\n      } else {\n        res.redirect(\"/#\" + querystring.stringify({\n          error: \"invalid_token\"\n        }));\n      }\n    });\n  }\n});\noSpotifyAuth.get(\"/refresh_token\", function (req, res) {\n  // requesting access token from refresh token\n  const refresh_token = req.query.refresh_token;\n  const authOptions = {\n    url: \"https://accounts.spotify.com/api/token\",\n    headers: {\n      Authorization: \"Basic \" + new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\n    },\n    form: {\n      grant_type: \"refresh_token\",\n      refresh_token: refresh_token\n    },\n    json: true\n  };\n  request.post(authOptions, function (error, response, body) {\n    if (!error && response.statusCode === 200) {\n      const access_token = body.access_token;\n      res.send({\n        access_token: access_token\n      });\n    }\n  });\n});\nconsole.log(\"Listening on 8888\");\noSpotifyAuth.listen(8888);","map":{"version":3,"sources":["C:\\src\\musicMaster\\musicmasterapp\\src\\SpotifyAuth.jsx"],"names":["express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","oSpotifyAuth","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Authorization","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\"); // Express web server framework\r\nconst request = require(\"request\"); // \"Request\" library\r\nconst cors = require(\"cors\");\r\nconst querystring = require(\"querystring\");\r\nconst cookieParser = require(\"cookie-parser\");\r\n\r\nconst client_id = \"d7e3503eaeb6461c95c9cc1132d23534\"; // Your client id\r\nconst client_secret = \"60f9e47ffb65480eb0a51c1fa4a5ff2c\"; // Your secret\r\nconst redirect_uri = \"http://localhost:3000/\"; // Your redirect uri\r\n\r\n/**\r\n * Generates a random string containing numbers and letters\r\n * @param  {number} length The length of the string\r\n * @return {string} The generated string\r\n */\r\nconst generateRandomString = function(length) {\r\n  const text = \"\";\r\n  const possible =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n};\r\n\r\nconst stateKey = \"spotify_auth_state\";\r\n\r\nconst oSpotifyAuth = express();\r\n\r\noSpotifyAuth\r\n  .use(express.static(__dirname + \"/public\"))\r\n  .use(cors())\r\n  .use(cookieParser());\r\n\r\noSpotifyAuth.get(\"/login\", function(req, res) {\r\n  const state = generateRandomString(16);\r\n  res.cookie(stateKey, state);\r\n\r\n  // your application requests authorization\r\n  const scope = \"user-read-private user-read-email\";\r\n  res.redirect(\r\n    \"https://accounts.spotify.com/authorize?\" +\r\n      querystring.stringify({\r\n        response_type: \"code\",\r\n        client_id: client_id,\r\n        scope: scope,\r\n        redirect_uri: redirect_uri,\r\n        state: state\r\n      })\r\n  );\r\n});\r\n\r\noSpotifyAuth.get(\"/callback\", function(req, res) {\r\n  // your application requests refresh and access tokens\r\n  // after checking the state parameter\r\n\r\n  const code = req.query.code || null;\r\n  const state = req.query.state || null;\r\n  const storedState = req.cookies ? req.cookies[stateKey] : null;\r\n\r\n  if (state === null || state !== storedState) {\r\n    res.redirect(\r\n      \"/#\" +\r\n        querystring.stringify({\r\n          error: \"state_mismatch\"\r\n        })\r\n    );\r\n  } else {\r\n    res.clearCookie(stateKey);\r\n    const authOptions = {\r\n      url: \"https://accounts.spotify.com/api/token\",\r\n      form: {\r\n        code: code,\r\n        redirect_uri: redirect_uri,\r\n        grant_type: \"authorization_code\"\r\n      },\r\n      headers: {\r\n        Authorization:\r\n          \"Basic \" +\r\n          new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\r\n      },\r\n      json: true\r\n    };\r\n\r\n    request.post(authOptions, function(error, response, body) {\r\n      if (!error && response.statusCode === 200) {\r\n        const access_token = body.access_token,\r\n          refresh_token = body.refresh_token;\r\n\r\n        const options = {\r\n          url: \"https://api.spotify.com/v1/me\",\r\n          headers: { Authorization: \"Bearer \" + access_token },\r\n          json: true\r\n        };\r\n\r\n        // use the access token to access the Spotify Web API\r\n        request.get(options, function(error, response, body) {\r\n          console.log(body);\r\n        });\r\n\r\n        // we can also pass the token to the browser to make requests from there\r\n        res.redirect(\r\n          \"/#\" +\r\n            querystring.stringify({\r\n              access_token: access_token,\r\n              refresh_token: refresh_token\r\n            })\r\n        );\r\n      } else {\r\n        res.redirect(\r\n          \"/#\" +\r\n            querystring.stringify({\r\n              error: \"invalid_token\"\r\n            })\r\n        );\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\noSpotifyAuth.get(\"/refresh_token\", function(req, res) {\r\n  // requesting access token from refresh token\r\n  const refresh_token = req.query.refresh_token;\r\n  const authOptions = {\r\n    url: \"https://accounts.spotify.com/api/token\",\r\n    headers: {\r\n      Authorization:\r\n        \"Basic \" +\r\n        new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\r\n    },\r\n    form: {\r\n      grant_type: \"refresh_token\",\r\n      refresh_token: refresh_token\r\n    },\r\n    json: true\r\n  };\r\n\r\n  request.post(authOptions, function(error, response, body) {\r\n    if (!error && response.statusCode === 200) {\r\n      const access_token = body.access_token;\r\n      res.send({\r\n        access_token: access_token\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nconsole.log(\"Listening on 8888\");\r\noSpotifyAuth.listen(8888);\r\n"]},"metadata":{},"sourceType":"module"}